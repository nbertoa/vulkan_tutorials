#ifndef UTILS_RENDER_PASS_SUBPASS_DEPENDENCY
#define UTILS_RENDER_PASS_SUBPASS_DEPENDENCY

#include <vulkan/vulkan.h>

namespace vk {
//
// VkSubpassDependency wrapper
//
// We need to tell to the render pass the dependencies between pairs of subpasses.
//
// You need the SubpassDependency to:
// - Create the RenderPass.
//
class SubpassDependency {
public:
    // * sourceSubpassIndex of the first subpass in the dependency, or VK_SUBPASS_EXTERNAL.
    //
    // * destSubpassIndex of the second subpass in the dependency, or VK_SUBPASS_EXTERNAL.
    //
    // * sourceStageMask bitmask specifying a set of source pipeline stages:
    // * destStageMask bitmask specifying a set of destination pipeline stages:
    //
    //   - VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT specifies the stage of the pipeline 
    //     where any commands are initially received by the queue.
    //   - VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT specifies the stage of the pipeline where 
    //     Draw/DispatchIndirect data structures are consumed. This stage also includes 
    //     reading commands written by vkCmdProcessCommandsNVX.
    //   - VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV
    //   - VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV
    //   - VK_PIPELINE_STAGE_VERTEX_INPUT_BIT specifies the stage of the pipeline where 
    //     vertex and index buffers are consumed.
    //   - VK_PIPELINE_STAGE_VERTEX_SHADER_BIT
    //   - VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT
    //   - VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT
    //   - VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT
    //   - VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT
    //   - VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT specifies the stage of the pipeline where 
    //     early fragment tests(depth and stencil tests before fragment shading) are performed.
    //     This stage also includes subpass load operations for framebuffer attachments with a depth/stencil format.
    //   - VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT specifies the stage of the pipeline where late 
    //     fragment tests(depth and stencil tests after fragment shading) are performed.
    //     This stage also includes subpass store operations for framebuffer attachments with a depth/stencil format.
    //   - VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT specifies the stage of the pipeline after 
    //     blending where the final color values are output from the pipeline. This stage also includes 
    //     subpass load and store operationsand multisample resolve operations for framebuffer 
    //     attachments with a color or depth/stencil format.
    //   - VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT
    //   - VK_PIPELINE_STAGE_TRANSFER_BIT specifies the execution of copy commands.
    //     This includes the operations resulting from all copy commands, clear commands (with the exception of vkCmdClearAttachments), 
    //     and vkCmdCopyQueryPoolResults.
    //   - VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT specifies the final stage in the pipeline where operations 
    //     generated by all commands complete execution.
    //   - VK_PIPELINE_STAGE_HOST_BIT specifies a pseudo-stage indicating execution on the host of reads/writes 
    //     of device memory. This stage is not invoked by any commands recorded in a command buffer.
    //   - VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV
    //   - VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV specifies the execution of vkCmdBuildAccelerationStructureNV, 
    //     vkCmdCopyAccelerationStructureNV, and vkCmdWriteAccelerationStructuresPropertiesNV.
    //   - VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT specifies the execution of all graphics pipeline stages.
    //   - VK_PIPELINE_STAGE_ALL_COMMANDS_BIT is equivalent to the logical OR of every other pipeline stage flag that 
    //     is supported on the queue it is used with.
    //   - VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT specifies the stage of the pipeline where the predicate of 
    //     conditional rendering is consumed.
    //   - VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT specifies the stage of the pipeline where vertex attribute 
    //     output values are written to the transform feedback buffers.
    //   - VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX specifies the stage of the pipeline where device-side generation of 
    //     commands via vkCmdProcessCommandsNVX is handled.
    //   - VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV specifies the stage of the pipeline where the shading rate image 
    //     is read to determine the shading rate for portions of a rasterized primitive.
    //   - VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT specifies the stage of the pipeline where the fragment 
    //     density map is read to generate the fragment areas.
    //
    // * sourceAccessMask bitmask specifying source access mask. This access scope is limited to access in the 
    //   pipeline stages determined by the source stage mask specified by sourceStageMask. 
    //   It is also limited to access types in the source access mask specified by sourceAccessMask:
    // * destAccessMask bistmask specifying destination access mask. This access scope is limited to access 
    //   in the pipeline stages determined by the destination stage mask specified by destStageMask. 
    //   It is also limited to access types in the destination access mask specified by destAccessMask.
    //     
    //   - VK_ACCESS_INDIRECT_COMMAND_READ_BIT specifies read access to indirect 
    //     command data read as part of an indirect drawing or dispatch command.
    //   - VK_ACCESS_INDEX_READ_BIT specifies read access to an index buffer as 
    //     part of an indexed drawing command, bound by vkCmdBindIndexBuffer.
    //   - VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT specifies read access to a vertex 
    //     buffer as part of a drawing command, bound by vkCmdBindVertexBuffers.
    //   - VK_ACCESS_UNIFORM_READ_BIT specifies read access to a uniform buffer.
    //   - VK_ACCESS_INPUT_ATTACHMENT_READ_BIT specifies read access to an input 
    //     attachment within a render pass during fragment shading.
    //   - VK_ACCESS_SHADER_READ_BIT specifies read access to a storage buffer, physical storage buffer, 
    //     uniform texel buffer, storage texel buffer, sampled image, or storage image.
    //   - VK_ACCESS_SHADER_WRITE_BIT specifies write access to a storage buffer, 
    //     physical storage buffer, storage texel buffer, or storage image.
    //   - VK_ACCESS_COLOR_ATTACHMENT_READ_BIT specifies read access to a color attachment, such as via blending, 
    //     logic operations, or via certain subpass load operations.It does not include advanced blend operations.
    //   - VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT specifies write access to a color, resolve, or depth/stencil 
    //     resolve attachment during a render pass or via certain subpass loadand store operations.
    //   - VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT specifies read access to a depth / stencil attachment, 
    //     via depth or stencil operations or via certain subpass load operations.
    //   - VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT specifies write access to a depth / stencil attachment, 
    //     via depth or stencil operations or via certain subpass loadand store operations.
    //   - VK_ACCESS_TRANSFER_READ_BIT specifies read access to an image or buffer in a copy operation.
    //   - VK_ACCESS_TRANSFER_WRITE_BIT specifies write access to an image or buffer in a clear or copy operation.
    //   - VK_ACCESS_HOST_READ_BIT specifies read access by a host operation. 
    //     Accesses of this type are not performed through a resource, but directly on memory.
    //   - VK_ACCESS_HOST_WRITE_BIT specifies write access by a host operation. 
    //     Accesses of this type are not performed through a resource, but directly on memory.
    //   - VK_ACCESS_MEMORY_READ_BIT specifies read access via non- pecific entities.These entities include the Vulkan 
    //     device and host, but may also include entities external to the Vulkan device or otherwise not part of the core Vulkan pipeline.
    //     When included in a destination access mask, makes all available writes visible to all future 
    //     read accesses on entities known to the Vulkan device.
    //   - VK_ACCESS_MEMORY_WRITE_BIT specifies write access via non-specific entities.These entities include the Vulkan 
    //     device and host, but may also include entities external to the Vulkan device or otherwise not part 
    //     of the core Vulkan pipeline. When included in a source access mask, all writes that are performed 
    //     by entities known to the Vulkan device are made available.
    //     When included in a destination access mask, makes all available writes visible to all future write 
    //     accesses on entities known to the Vulkan device.
    //   - VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT specifies read access to a predicate as part of conditional rendering.
    //   - VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT specifies write access to a transform feedback buffer made 
    //     when transform feedback is active.
    //   - VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT specifies read access to a transform feedback counter buffer 
    //     which is read when vkCmdBeginTransformFeedbackEXT executes.
    //   - VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT specifies write access to a transform feedback counter buffer 
    //     which is written when vkCmdEndTransformFeedbackEXT executes.
    //   - VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX specifies reads from VkBuffer inputs to vkCmdProcessCommandsNVX.
    //   - VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX specifies writes to the target command buffer in vkCmdProcessCommandsNVX.
    //   - VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT is similar to 
    //     VK_ACCESS_COLOR_ATTACHMENT_READ_BIT, but also includes advanced blend operations.
    //   - VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV specifies read access to a shading rate 
    //     image as part of a drawing command, as bound by vkCmdBindShadingRateImageNV.
    //   - VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV specifies read access to 
    //     an acceleration structure as part of a trace or build command.
    //   - VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV specifies write access to 
    //     an acceleration structure as part of a build command.
    //   - VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT specifies read access to a 
    //     fragment density map attachment during dynamic fragment density map operations
    //
    // * dependencyFlags bitmask. The availability and visibility operations defined by a subpass dependency 
    //   affect the execution of image layout transitions within the render pass.
    //
    //   - VK_DEPENDENCY_BY_REGION_BIT specifies that dependencies will be framebuffer-local.
    //   - VK_DEPENDENCY_VIEW_LOCAL_BIT specifies that a subpass has more than one view.
    //   - VK_DEPENDENCY_DEVICE_GROUP_BIT specifies that dependencies are non-device-local dependency.
    //
    // Notes:
    // If sourceSubpassIndex is equal to destSubpassIndex then this dependency describes a subpass self-dependency, 
    // and only constrains the pipeline barriers allowed within a subpass instance. 
    // Otherwise, when a render pass instance which includes a subpass dependency is submitted to a queue, 
    // it defines a memory dependency between the subpasses identified by sourceSubpassIndex and destSubpassIndex.
    //
    // If sourceSubpassIndex is equal to VK_SUBPASS_EXTERNAL, the first synchronization scope includes commands 
    // that occur earlier in submission order than the vkCmdBeginRenderPass used to begin the render pass instance.
    // Otherwise, the first set of commands includes all commands submitted as part of the subpass instance identified by srcSubpass
    // and any load, store or multisample resolve operations on attachments used in srcSubpass.
    // In either case, the first synchronization scope is limited to operations on the pipeline stages determined by the source stage mask 
    // specified by srcStageMask.
    //
    // If destSubpassIndex is equal to VK_SUBPASS_EXTERNAL, the second synchronization scope includes commands that occur later 
    // in submission order than the vkCmdEndRenderPass used to end the render pass instance.
    // Otherwise, the second set of commands includes all commands submitted as part of the subpass instance identified by destSubpassIndex 
    // and any load, store or multisample resolve operations on attachments used in destSubpassIndex. 
    // In either case, the second synchronization scope is limited to operations on the pipeline stages determined by the destination stage mask 
    // specified by destStageMask.
    //
    // The sourceAccessMask scope is limited to access in the pipeline stages determined by the source stage mask specified by sourceStageMask. 
    // It is also limited to access types in the source access mask specified by sourceAccessMask.
    //
    // The destAccessMask scope is limited to access in the pipeline stages determined by the destination stage mask specified by destStageMask.
    // It is also limited to access types in the destination access mask specified by dstAccessMask.
    SubpassDependency(const uint32_t sourceSubpassIndex,
                      const uint32_t destSubpassIndex,
                      const VkPipelineStageFlags sourceStageMask,
                      const VkAccessFlags sourceAccessMask,
                      const VkPipelineStageFlags destStageMask,
                      const VkAccessFlags destAccessMask,
                      const VkDependencyFlags dependencyFlags = {});

private:
    VkSubpassDependency mSubpassDependency = {};
};
}

#endif 